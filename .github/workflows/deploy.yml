name: Deploy to Vercel with Advanced AI Features

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Cache dependencies
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: npm install

      # Step 5: Validate CSS Setup
      - name: Validate CSS Setup
        run: |
          npm install postcss autoprefixer postcss-loader --save-dev || true
          ls -R styles || echo "Styles folder or global.css missing"

      # Step 6: Update Dependencies
      - name: Update Dependencies
        run: |
          npx npm-check-updates -u
          npm install
          npm audit fix
        continue-on-error: true

      # Step 7: Build the project
      - name: Build the Project
        run: |
          set -o pipefail
          npm run build 2>&1 | tee build_logs.txt
        continue-on-error: true

      # Step 8: Analyze Build Logs
      - name: Analyze Build Logs
        if: failure()
        run: |
          echo "Build failed. Logs are being uploaded."
          cat build_logs.txt

      # Step 9: Upload Build Logs for Debugging
      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: build_logs.txt

      # Step 10: Analyze Build Errors with ChatGPT
      - name: Analyze Build Errors with ChatGPT
        if: failure()
        run: |
          curl https://api.openai.com/v1/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d '{
              "model": "gpt-4",
              "prompt": "Analyze the following build logs and suggest fixes:\n\n$(cat build_logs.txt)",
              "max_tokens": 500
            }' > suggestions.json

      # Step 11: Post ChatGPT Suggestions to Pull Request
      - name: Post ChatGPT Suggestions
        if: failure() && github.event_name == 'pull_request'
        env:
          MY_CUSTOM_TOKEN: ${{ secrets.MY_CUSTOM_TOKEN }}
        run: |
          COMMENT_BODY=$(jq -r '.choices[0].text' suggestions.json)
          curl -H "Authorization: Bearer $MY_CUSTOM_TOKEN" \
            -X POST \
            -d '{"body": "'"ChatGPT Suggestions:\n$COMMENT_BODY"'"}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

      # Step 12: Deploy to Vercel
      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: npx vercel --prod --yes
