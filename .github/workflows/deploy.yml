name: Deploy to Vercel

on:
  push:
    branches:
      - main  # Deploy only on pushes to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          npm install
          npm install @supabase/supabase-js
          npm install @react-three/fiber three --save
          npm install @types/three eslint-config-next --save-dev
          npm install pino --save # Logging library

      # Step 4: Create Supabase client
      - name: Setup Supabase client
        run: |
          mkdir -p lib
          echo "import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;

export const supabase = createClient(supabaseUrl, supabaseKey);" > lib/supabaseClient.ts

        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      # Step 5: Add API health check and testSupabase.ts routes
      - name: Add API routes
        run: |
          mkdir -p pages/api
          echo "import { supabase } from '@/lib/supabaseClient';

export default async function handler(req, res) {
  try {
    const { data, error } = await supabase.from('bookings').select('*');
    if (error) throw error;
    res.status(200).json({ bookings: data });
  } catch (err) {
    console.error('Error fetching bookings:', err);
    res.status(500).json({ error: 'Failed to fetch bookings' });
  }
}" > pages/api/testSupabase.ts

          echo "import { supabase } from '@/lib/supabaseClient';

export default async function handler(req, res) {
  try {
    const { error } = await supabase.from('bookings').select('id');
    if (error) throw error;
    res.status(200).json({ status: 'Supabase connection is healthy' });
  } catch (err) {
    console.error('Health check failed:', err);
    res.status(500).json({ status: 'Supabase connection failed' });
  }
}" > pages/api/healthCheck.ts

      # Step 6: Add logging setup
      - name: Setup logging
        run: |
          mkdir -p utils
          echo "import pino from 'pino';

export const logger = pino({
  level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
  transport: process.env.NODE_ENV !== 'production'
    ? {
        target: 'pino-pretty',
        options: { colorize: true },
      }
    : undefined,
});" > utils/logger.ts

      # Step 7: Lint the code
      - name: Lint the code
        run: npm run lint

      # Step 8: Build the application
      - name: Build the application
        env:
          CI: false # Disables certain Next.js optimizations not compatible with CI
        run: npm run build

      # Step 9: Deploy to Vercel
      - name: Deploy to Vercel
        run: npx vercel --prod --yes --name="personal-digital-shop" --token=$VERCEL_TOKEN
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
