name: Deploy to Vercel

on:
  push:
    branches:
      - main  # Deploy only on pushes to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          npm install
          npm install @supabase/supabase-js
          npm install @react-three/fiber three --save
          npm install @types/three eslint-config-next --save-dev
          npm install pino --save # Logging library
          npm install react-modal # Modal library

      # Step 4: Create Supabase client
      - name: Setup Supabase client
        run: |
          mkdir -p lib
          echo > lib/supabaseClient.ts <<- EOL
          import { createClient } from '@supabase/supabase-js';

          const supabaseUrl = process.env.SUPABASE_URL;
          const supabaseKey = process.env.SUPABASE_KEY;

          export const supabase = createClient(supabaseUrl, supabaseKey);
          EOL
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      # Step 5: Add API routes with logging and error handling
      - name: Add API routes
        run: |
          mkdir -p pages/api
          echo > pages/api/testSupabase.ts <<- EOL
          import { supabase } from '@/lib/supabaseClient';
          import { logger } from '@/utils/logger';

          export default async function handler(req, res) {
            try {
              logger.info('Fetching bookings from Supabase');
              const { data, error } = await supabase.from('bookings').select('*');
              if (error) {
                logger.error('Error fetching bookings', { error });
                throw error;
              }
              logger.info('Bookings fetched successfully', { data });
              res.status(200).json({ bookings: data });
            } catch (err) {
              logger.error('Error in fetching bookings', { err });
              res.status(500).json({ error: 'Failed to fetch bookings' });
            }
          }
          EOL

          echo > pages/api/healthCheck.ts <<- EOL
          import { supabase } from '@/lib/supabaseClient';
          import { logger } from '@/utils/logger';

          export default async function handler(req, res) {
            try {
              logger.info('Performing Supabase health check');
              const { error } = await supabase.from('bookings').select('id').limit(1);
              if (error) {
                logger.error('Supabase health check failed', { error });
                throw error;
              }
              logger.info('Supabase connection is healthy');
              res.status(200).json({ status: 'Supabase connection is healthy' });
            } catch (err) {
              logger.error('Health check failed', { err });
              res.status(500).json({
                status: 'Supabase connection failed',
                message: err.message,
              });
            }
          }
          EOL

      # Step 6: Add logging setup
      - name: Setup logging and environment validation
        run: |
          mkdir -p utils
          echo > utils/logger.ts <<- EOL
          import pino from 'pino';

          export const logger = pino({
            level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
            transport: process.env.NODE_ENV !== 'production'
              ? {
                  target: 'pino-pretty',
                  options: { colorize: true },
                }
              : undefined,
          });
          EOL

          echo > utils/validateEnv.ts <<- EOL
          export function validateEnv() {
            const requiredEnvVars = ['SUPABASE_URL', 'SUPABASE_KEY'];
            requiredEnvVars.forEach((env) => {
              if (!process.env[env]) {
                console.error(\`Missing environment variable: \${env}\`);
                throw new Error(\`Environment variable \${env} is not set.\`);
              }
            });
          }
          EOL

      # Step 7: Add Three.js Component Validation
      - name: Validate Three.js Components
        run: |
          echo "Validating Three.js animations"
          echo > pages/components/LoadingIndicator.tsx <<- EOL
          import { Canvas, useFrame } from '@react-three/fiber';
          import { useRef } from 'react';

          function RotatingCube() {
            const cubeRef = useRef<THREE.Mesh>(null);
            useFrame(() => {
              if (cubeRef.current) {
                cubeRef.current.rotation.x += 0.01;
                cubeRef.current.rotation.y += 0.01;
              }
            });
            return (
              <mesh ref={cubeRef}>
                <boxGeometry args={[1, 1, 1]} />
                <meshStandardMaterial color='#6E44FF' />
              </mesh>
            );
          }

          export default function LoadingIndicator() {
            return (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <Canvas>
                  <ambientLight />
                  <pointLight position={[10, 10, 10]} />
                  <RotatingCube />
                </Canvas>
              </div>
            );
          }
          EOL

      # Step 8: Lint the code
      - name: Lint the code
        run: npm run lint

      # Step 9: Build the application
      - name: Build the application
        env:
          CI: false # Disables certain Next.js optimizations not compatible with CI
        run: npm run build

      # Step 10: Deploy to Vercel
      - name: Deploy to Vercel
        run: npx vercel --prod --yes --name="personal-digital-shop" --token=$VERCEL_TOKEN
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}