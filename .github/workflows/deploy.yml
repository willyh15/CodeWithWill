name: Deploy to Vercel

on:
  push:
    branches:
      - main  # Deploy only on pushes to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          npm install
          npm install @supabase/supabase-js
          npm install @react-three/fiber three --save
          npm install @types/three eslint-config-next --save-dev
          npm install pino --save # Logging library
          npm install react-modal react-lazyload # Additional libraries

      # Step 4: Create Supabase client
      - name: Setup Supabase client
        run: |
          mkdir -p lib
          echo > lib/supabaseClient.ts <<- EOL
          import { createClient } from '@supabase/supabase-js';

          const supabaseUrl = process.env.SUPABASE_URL;
          const supabaseKey = process.env.SUPABASE_KEY;

          export const supabase = createClient(supabaseUrl, supabaseKey);
          EOL
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      # Step 5: Add utility functions
      - name: Add Utility Functions
        run: |
          mkdir -p utils
          echo > utils/detectPerformance.ts <<- EOL
          export function detectLowPerformance() {
            const ua = navigator.userAgent;
            const isLowPerformance =
              /Android|iPhone|iPad|iPod|Windows Phone/i.test(ua) ||
              navigator.hardwareConcurrency < 4;
            return isLowPerformance;
          }
          EOL

          echo > utils/logger.ts <<- EOL
          import pino from 'pino';

          export const logger = pino({
            level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
            transport: process.env.NODE_ENV !== 'production'
              ? {
                  target: 'pino-pretty',
                  options: { colorize: true },
                }
              : undefined,
          });
          EOL

          echo > utils/validateEnv.ts <<- EOL
          export function validateEnv() {
            const requiredEnvVars = ['SUPABASE_URL', 'SUPABASE_KEY'];
            requiredEnvVars.forEach((env) => {
              if (!process.env[env]) {
                console.error(\`Missing environment variable: \${env}\`);
                throw new Error(\`Environment variable \${env} is not set.\`);
              }
            });
          }
          EOL

      # Step 6: Validate Three.js components
      - name: Validate Three.js Components
        run: |
          mkdir -p components
          echo > components/LoadingIndicator.tsx <<- EOL
          import { Canvas, useFrame } from '@react-three/fiber';
          import { useRef } from 'react';

          function RotatingCube() {
            const cubeRef = useRef<THREE.Mesh>(null);
            useFrame(() => {
              if (cubeRef.current) {
                cubeRef.current.rotation.x += 0.01;
                cubeRef.current.rotation.y += 0.01;
              }
            });
            return (
              <mesh ref={cubeRef}>
                <boxGeometry args={[1, 1, 1]} />
                <meshStandardMaterial color='#6E44FF' />
              </mesh>
            );
          }

          export default function LoadingIndicator() {
            return (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <Canvas>
                  <ambientLight />
                  <pointLight position={[10, 10, 10]} />
                  <RotatingCube />
                </Canvas>
              </div>
            );
          }
          EOL

      # Step 7: Optimize lazy-loaded components
      - name: Optimize Lazy-Loaded Components
        run: |
          mkdir -p components/Layout
          echo > components/Layout/GlobalLayout.tsx <<- EOL
          import React, { ReactNode } from "react";
          import dynamic from "next/dynamic";
          import { useRouter } from "next/router";

          const StarfieldCanvas = dynamic(() => import("@/components/Starfield/Starfield"), { ssr: false });
          const ThreeDBackground = dynamic(() => import("@/components/ThreeDBackground"), { ssr: false });

          export default function GlobalLayout({ children }: { children: ReactNode }) {
            const router = useRouter();

            const routeConfig = {
              "/": { starColor: "#FFD700", threeColor: 0x6e44ff },
              "/projects": { starColor: "#FF83FF", threeColor: 0xff0000 },
              "/contact": { starColor: "#00FF00", threeColor: 0x00ff00 },
            };

            const { starColor, threeColor } = routeConfig[router.pathname] || {
              starColor: "#6E44FF",
              threeColor: 0x00ff00,
            };

            return (
              <div className="relative overflow-hidden">
                <div className="absolute inset-0 -z-10">
                  <StarfieldCanvas color={starColor} />
                  <ThreeDBackground cubeColor={threeColor} />
                </div>
                <div className="relative z-10">{children}</div>
              </div>
            );
          }
          EOL

      # Step 8: Lint the code
      - name: Lint the code
        run: npm run lint

      # Step 9: Build the application
      - name: Build the application
        env:
          CI: false # Disables certain Next.js optimizations not compatible with CI
        run: npm run build

      # Step 10: Deploy to Vercel
      - name: Deploy to Vercel
        run: npx vercel --prod --yes --name="personal-digital-shop" --token=$VERCEL_TOKEN
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}